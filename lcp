#!/bin/bash

# LCP (LlamaCP) - Simple Ollama-like Model Manager
# Combines hf CLI with basic model management and testing

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
MODELS_DIR="./models"
CONTAINER_NAME="llamacpp"
API_BASE="http://localhost:11434"

# Ensure models directory exists
mkdir -p "$MODELS_DIR"

# Function to print colored output
print_header() {
    echo -e "${CYAN}$1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Function to check if container is running
check_container() {
    if ! docker ps -q -f name="$CONTAINER_NAME" &>/dev/null; then
        print_error "LlamaCP container is not running"
        print_info "Start it with: ./start-llamacpp.sh"
        return 1
    fi
    return 0
}

# Function to check if API is responding
check_api() {
    if ! curl -s -f "$API_BASE/health" >/dev/null 2>&1; then
        print_error "LlamaCP API is not responding"
        return 1
    fi
    return 0
}

# Function to list local models
list_models() {
    print_header "📋 Local Models"
    echo ""
    
    if [ ! -d "$MODELS_DIR" ] || [ -z "$(ls -A "$MODELS_DIR" 2>/dev/null)" ]; then
        print_info "No models found in $MODELS_DIR"
        return
    fi
    
    local count=0
    for model in "$MODELS_DIR"/*.gguf; do
        if [ -f "$model" ]; then
            local name=$(basename "$model" .gguf)
            local size=$(du -h "$model" | cut -f1)
            local date=$(stat -c '%y' "$model" | cut -d' ' -f1)
            
            count=$((count + 1))
            printf "%2d. %-30s %8s  %s\n" "$count" "$name" "$size" "$date"
            
            # Check if this is the active model
            if [ -L "$MODELS_DIR/model.gguf" ] && [ "$(readlink "$MODELS_DIR/model.gguf")" = "$(basename "$model")" ]; then
                echo -e "    ${GREEN}→ Currently active${NC}"
            fi
        fi
    done
    
    if [ "$count" -eq 0 ]; then
        print_info "No .gguf models found"
    fi
    echo ""
}

# Function to set active model
set_active_model() {
    list_models
    
    local models=("$MODELS_DIR"/*.gguf)
    if [ ${#models[@]} -eq 0 ] || [ ! -f "${models[0]}" ]; then
        print_error "No models available"
        return 1
    fi
    
    echo -n "Select model number (or 'q' to quit): "
    read -r choice
    
    if [ "$choice" = "q" ] || [ "$choice" = "Q" ]; then
        return 0
    fi
    
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#models[@]} ]; then
        print_error "Invalid selection"
        return 1
    fi
    
    local selected_model="${models[$((choice-1))]}"
    local model_name=$(basename "$selected_model")
    
    # Create symlink
    ln -sf "$model_name" "$MODELS_DIR/model.gguf"
    print_success "Set active model: $model_name"
    
    # Restart container to load new model
    print_info "Restarting container to load new model..."
    docker compose restart "$CONTAINER_NAME" >/dev/null 2>&1
    
    # Wait for container to be ready
    echo -n "Waiting for model to load"
    for i in {1..20}; do
        if check_api; then
            echo ""
            print_success "Model loaded and ready!"
            return 0
        fi
        echo -n "."
        sleep 2
    done
    echo ""
    print_warning "Model may still be loading. Check with: docker logs $CONTAINER_NAME"
}

# Function to remove a model
remove_model() {
    list_models
    
    local models=("$MODELS_DIR"/*.gguf)
    if [ ${#models[@]} -eq 0 ] || [ ! -f "${models[0]}" ]; then
        print_error "No models to remove"
        return 1
    fi
    
    echo -n "Select model number to remove (or 'q' to quit): "
    read -r choice
    
    if [ "$choice" = "q" ] || [ "$choice" = "Q" ]; then
        return 0
    fi
    
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#models[@]} ]; then
        print_error "Invalid selection"
        return 1
    fi
    
    local selected_model="${models[$((choice-1))]}"
    local model_name=$(basename "$selected_model")
    
    # Confirm deletion
    echo -n "Are you sure you want to delete '$model_name'? (y/N): "
    read -r confirm
    
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        rm "$selected_model"
        
        # Remove symlink if it pointed to this model
        if [ -L "$MODELS_DIR/model.gguf" ] && [ "$(readlink "$MODELS_DIR/model.gguf")" = "$model_name" ]; then
            rm "$MODELS_DIR/model.gguf"
            print_warning "Removed active model symlink - set a new active model"
        fi
        
        print_success "Removed model: $model_name"
    else
        print_info "Cancelled"
    fi
}

# Function to download a model
download_model() {
    print_header "📥 Download Model"
    echo ""
    print_info "Popular models:"
    echo "  1. bartowski/Phi-3.5-mini-instruct-GGUF (Phi-3.5-mini-instruct-Q4_K_M.gguf) - 2.2GB"
    echo "  2. bartowski/Qwen2.5-7B-Instruct-GGUF (Qwen2.5-7B-Instruct-Q4_K_M.gguf) - 4.4GB"
    echo "  3. bartowski/Llama-3.1-8B-Instruct-GGUF (Llama-3.1-8B-Instruct-Q4_K_M.gguf) - 4.7GB"
    echo "  4. Custom (enter repo/file manually)"
    echo ""
    
    echo -n "Select option (1-4 or 'q' to quit): "
    read -r choice
    
    case "$choice" in
        1)
            local repo="bartowski/Phi-3.5-mini-instruct-GGUF"
            local file="Phi-3.5-mini-instruct-Q4_K_M.gguf"
            ;;
        2)
            local repo="bartowski/Qwen2.5-7B-Instruct-GGUF"
            local file="Qwen2.5-7B-Instruct-Q4_K_M.gguf"
            ;;
        3)
            local repo="bartowski/Llama-3.1-8B-Instruct-GGUF"
            local file="Llama-3.1-8B-Instruct-Q4_K_M.gguf"
            ;;
        4)
            echo -n "Enter HuggingFace repo (e.g., microsoft/Phi-3-mini-4k-instruct-gguf): "
            read -r repo
            echo -n "Enter file name (e.g., Phi-3-mini-4k-instruct-q4.gguf): "
            read -r file
            ;;
        "q"|"Q")
            return 0
            ;;
        *)
            print_error "Invalid selection"
            return 1
            ;;
    esac
    
    if [ -z "$repo" ] || [ -z "$file" ]; then
        print_error "Repository and file name required"
        return 1
    fi
    
    print_info "Downloading $file from $repo..."
    echo ""
    
    if hf download "$repo" "$file" --local-dir "$MODELS_DIR/" --local-dir-use-symlinks False; then
        print_success "Downloaded: $file"
        
        # Ask if user wants to set it as active
        echo -n "Set as active model? (Y/n): "
        read -r make_active
        
        if [ "$make_active" != "n" ] && [ "$make_active" != "N" ]; then
            ln -sf "$file" "$MODELS_DIR/model.gguf"
            print_success "Set as active model"
            
            print_info "Restarting container to load new model..."
            docker compose restart "$CONTAINER_NAME" >/dev/null 2>&1
        fi
    else
        print_error "Download failed"
        return 1
    fi
}

# Function to chat with the model
chat_with_model() {
    if ! check_container || ! check_api; then
        return 1
    fi
    
    print_header "💬 Chat Interface"
    echo ""
    print_info "Type 'quit', 'exit', or Ctrl+C to exit"
    print_info "Type '/clear' to clear conversation history"
    echo ""
    
    local conversation=()
    
    while true; do
        echo -n -e "${CYAN}You: ${NC}"
        read -r user_input
        
        # Handle special commands
        case "$user_input" in
            "quit"|"exit"|"/quit"|"/exit")
                print_info "Goodbye!"
                break
                ;;
            "/clear")
                conversation=()
                print_success "Conversation cleared"
                continue
                ;;
            "")
                continue
                ;;
        esac
        
        # Add user message to conversation
        conversation+=("{\"role\":\"user\",\"content\":\"$user_input\"}")
        
        # Build messages array
        local messages="["
        local first=true
        for msg in "${conversation[@]}"; do
            if [ "$first" = true ]; then
                first=false
            else
                messages+=","
            fi
            messages+="$msg"
        done
        messages+="]"
        
        # Make API call
        echo -n -e "${GREEN}Assistant: ${NC}"
        local response=$(curl -s -X POST "$API_BASE/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -d "{\"model\":\"phi-3.5\",\"messages\":$messages,\"max_tokens\":500,\"temperature\":0.7}")
        
        # Extract content from response
        local content=$(echo "$response" | jq -r '.choices[0].message.content' 2>/dev/null)
        
        if [ "$content" != "null" ] && [ -n "$content" ]; then
            echo "$content"
            # Add assistant response to conversation
            local escaped_content=$(echo "$content" | sed 's/"/\\"/g' | tr '\n' ' ')
            conversation+=("{\"role\":\"assistant\",\"content\":\"$escaped_content\"}")
        else
            print_error "Failed to get response from model"
            print_info "Raw response: $response"
        fi
        
        echo ""
    done
}

# Function to show status
show_status() {
    print_header "📊 LCP Status"
    echo ""
    
    # Container status
    if check_container; then
        print_success "Container: Running"
        
        if check_api; then
            print_success "API: Responding"
            
            # Get current model info
            if [ -L "$MODELS_DIR/model.gguf" ]; then
                local active_model=$(readlink "$MODELS_DIR/model.gguf")
                print_info "Active model: $active_model"
            else
                print_warning "No active model set"
            fi
        else
            print_warning "API: Not responding"
        fi
    else
        print_error "Container: Not running"
    fi
    
    # Model count
    local model_count=$(find "$MODELS_DIR" -name "*.gguf" -type f 2>/dev/null | wc -l)
    print_info "Local models: $model_count"
    
    echo ""
}

# Function to show help
show_help() {
    echo -e "${CYAN}LCP (LlamaCP) - Simple Model Manager${NC}"
    echo ""
    echo -e "${YELLOW}COMMANDS:${NC}"
    echo "  list, ls           List local models"
    echo "  download, pull     Download a model from HuggingFace"
    echo "  remove, rm         Remove a local model"
    echo "  active, use        Set active model"
    echo "  chat, c            Chat with the active model"
    echo "  status, info       Show system status"
    echo "  help, h            Show this help"
    echo ""
    echo -e "${YELLOW}EXAMPLES:${NC}"
    echo "  ./lcp list         List all downloaded models"
    echo "  ./lcp download     Download a new model"
    echo "  ./lcp active       Switch active model"
    echo "  ./lcp chat         Start chat interface"
    echo "  ./lcp status       Check system status"
    echo ""
    echo -e "${YELLOW}FILES:${NC}"
    echo "  Models: $MODELS_DIR/"
    echo "  Active: $MODELS_DIR/model.gguf -> [symlink to active model]"
    echo ""
    echo -e "${YELLOW}REQUIREMENTS:${NC}"
    echo "  - Docker container 'llamacpp' running"
    echo "  - hf CLI installed (pipx install huggingface_hub)"
    echo "  - jq installed for JSON parsing"
    echo ""
    echo -e "${CYAN}For detailed Docker management, use: ./llamacpp${NC}"
}

# Main command dispatcher
main() {
    case "${1:-help}" in
        "list"|"ls")
            list_models
            ;;
        "download"|"pull")
            download_model
            ;;
        "remove"|"rm")
            remove_model
            ;;
        "active"|"use")
            set_active_model
            ;;
        "chat"|"c")
            chat_with_model
            ;;
        "status"|"info")
            show_status
            ;;
        "help"|"h"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Check dependencies
check_deps() {
    local missing=()
    
    if ! command -v hf >/dev/null 2>&1; then
        missing+=("hf CLI (install with: pipx install huggingface_hub)")
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        missing+=("jq (install with package manager)")
    fi
    
    if ! command -v docker >/dev/null 2>&1; then
        missing+=("docker")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "Missing dependencies:"
        for dep in "${missing[@]}"; do
            echo "  - $dep"
        done
        exit 1
    fi
}

# Run dependency check and main function
check_deps
main "$@"